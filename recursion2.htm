<!DOCTYPE html>
<html lang="en">
<body>


<script src="./lib/slib.js"></script>

<script>

function cl(arg) {
    console.log(arg);
}


/**
 * По поводу рекурсии нужно усвоить три момента:
 *
 * Во-первых, должно быть условие окончания рекурсии. То есть в какой-то момент нужно остановиться и начать
 * подъем вверх.
 *
 * Во-вторых, каждая итерация должна вычислять свой результат. То есть должна быть точка, когда
 * результат на этом уровне вложенности достигнут и зафиксирован.
 *
 * В-третьих, нужно осознать, что каждая итерация - это независимое выполнение. То есть текущая итерация
 * работу сделала, свой результат зафиксировала и вызвала следующую итерацию, которая вычислит свой результат и т.д.
 *
 
 */


function seqSum(n){
    /* Окончание рекурсии */
    if(n == 1) return 1;

    /* Фиксация результата своей текущей итерации - это n 
     * и вызов следующей итерации
     */
    return n + seqSum(n - 1);
}

//cl(seqSum(5));



/**
 * Спускаемся вниз, и снизу раскручиваем умножение.
 * Основная особенность - выполняем действие с возвращенным результатом
 */


function factUp(n) {
    return (n == 1) ? n : n * factUp(n-1);
}

/**
 * Умножаем сверху вниз.
 * Здесь другая особенность - не выполняем дополнительных действий с 
 * возвращаемым результатом, но приходится создавать доп функцию: go.
 * Можно и без go, но тогда у factDown должно быть два аргумента:
 * число, для которого вычисляем факториал и аккумулятор.
 
 */

function factDown(n) {

    function go(_n, a) {
	/* cl(["_n=", _n, ", a=", a].join(" ")); */
	return (_n == 1) ? a : go(_n - 1, a * _n);
    }
    return go(n, 1);
}

/**
 * Числа Фибоначи, в которых каждое последующее число равно сумме двух предыдущих чисел. Сама последовательность
 * начинается с 0, 1.
 *
 *
 * 0, 1, 1, 2, 3, 5, 8, 13, 21...
 *
 * Если посмотреть на последовательность, то видно что каждое последующее равно сумме текущего и предыдущего. На
 * этом и построена рекурсия.
 *
 */
function fiban(n) {
    var arr = [0];
    
    function go(_n, prev) {
	if(_n != n){
	    /* cl("_n " + _n + ",  " + prev); */
	    
	    /* next = last        + before_last  */
	    arr[_n] = arr[_n - 1] + prev;
	    go(_n + 1, arr[_n - 1]);
	}
	else return;
    }
    go(1, 1);

    return arr;
}

function first(a){
    return a[0];
}
function second(a){
    return (a.length > 1) ? a[1] : [];
}
function rest(a){
    return (a.length > 1) ? a.slice(1) : [];
}
function isEmpty(a){
    return a.length == 0;
}
function cat(head, tail){
    return head.concat(tail);
}


var ttt = [1,2,2,45,65,43, 'test'];
//cl(contains(ttt, 'test1'));


var influences = [
    ['Lisp', 'Smalltalk'],
    ['Lisp', 'Scheme'],
    ['Smalltalk', 'Self'],
    ['Scheme', 'JavaScript'],
    ['Scheme', 'Lua'],
    ['Self', 'Lua'],
    ['Self', 'JavaScript']];

function finder(graph, node) {

    /* Точка выхода из рекурсии*/
    if(__.isEmpty(graph)) return [];

    var vector 	= first(graph);
    var from 	= first(vector);
    var to 	= second(vector);

    var more = rest(graph); /* cl(more); */

    /* Вычисляем результат текущей итерации */
    if(node == from) {
	/* Результат есть, фиксируем в __.construct(to,...*/
	/* И на следующую итерацию*/
	return __.construct(to, finder(more, node));
    }
    else 
	/* Текущая итерация без результата, идем на следующую */
	return finder(more, node);
}
cl(finder(influences, 'Lisp'));


/**
 * @graph - общий граф в виде массива пар связей
 * @nodes - ноды, которые нужно просмотреть. Добавляются и удаляются в процессе работы
 * @seen - ноды, которые уже посетили
 *
 *
 * На каждой итерации функция попадает в очередную ноду (первый элемент массива nodes).
 * Здесь уже были (contains in seen) ?
 *	Да: продолжить осмотр нод по списку more
 *	Нет: получить "детей" текущей ноды, зепрепендить их в more и дальше на осмотр
 *
 * Кода достигаем узла Lua, то связь родитель->наследник прерывается, новые элементы в nodes
 * не добавляем, а просматриваем имеющиеся 
 */
function depthSearch(graph, nodes, seen) {
    if(__.deb) {
	__.cl("\nnodes:", nodes);
	__.cl("seen:", seen);
    }

    /* Посетили каждую ноду. Можно уходить*/
    if (__.isEmpty(nodes)) return __.rev(seen);

    var node = __.first(nodes);
    var more = __.rest(nodes);

    if (__.contains(seen, node))
	return depthSearch(graph, more, seen);
    else
	return depthSearch(graph, __.cat(finder(graph, node), more), __.construct(node, seen));
}
//cl(depthSearch(influences, ['Lisp'], []));


/**
 * 

flatten( [[1,2],[3,4]] )

    cat( in [[1,2],[3,4]]
     map( [[1,2],[3,4]] )
     map => flatten( [1,2] )
	cat( in [1,2]
	 map( [1,2] )
	 map => flatten(1), return [1]
	 map => flatten(2), return [2]
	cat( out [1,2]
     map => flatten( [3,4] )
	cat( in [3,4]
	 map => flatten(3), return [3]
	 map => flatten(4), return [4]
	cat( out [3,4]
    cat(out [1,2,3,4]
    
    Задача алгоритма - рекурсивно "расщепить" все массивы, включая вложенные, до одноэлементных массивов,
    которые потом функция cat соберет в единый одномерный массив. То есть cat передает в map массив, а map
    возвращает массив одноэлементных массивов вот так [1,2,3] => [[1], [2], [3]].
 
 */
 


function flatten(arr){
    if(__.isArrayLike(arr))
	return __.cat.apply(null, __.map(arr, flatten));
    else 
	return [arr];

}
__.cl(flatten([[1,2],[3,4]]));
//__.cl(flatten([[10,20], [30,["a", "test"], 40]]));


</script>
</body>
</html>

