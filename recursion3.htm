<!DOCTYPE html>
<html lang="en">
<body>


<script src="./lib/slib.js"></script>

<script>

/**
 * По поводу рекурсии нужно усвоить три момента:
 *
 * Во-первых, должно быть условие окончания рекурсии. То есть в какой-то момент нужно остановиться и начать
 * подъем вверх.
 *
 * Во-вторых, каждая итерация должна вычислять свой результат. То есть должна быть точка, когда
 * результат на этом уровне вложенности достигнут и зафиксирован.
 *
 * В-третьих, нужно осознать, что каждая итерация - это независимое выполнение. То есть текущая итерация
 * работу сделала, свой результат зафиксировала и вызвала следующую итерацию, которая вычислит свой результат и т.д.
 *
 
 */


function seqSum(n){
    /* Окончание рекурсии */
    if(n == 1) return 1;

    /* Фиксация результата своей текущей итерации - это n 
     * и вызов следующей итерации
     */
    return n + seqSum(n - 1);
}

//cl(seqSum(5));



/**
 * Спускаемся вниз, и снизу раскручиваем умножение.
 * Основная особенность - выполняем действие с возвращенным результатом
 */


function factUp(n) {
    return (n == 1) ? n : n * factUp(n-1);
}

/**
 * Умножаем сверху вниз.
 * Здесь другая особенность - не выполняем дополнительных действий с 
 * возвращаемым результатом, но приходится создавать доп функцию: go.
 * Можно и без go, но тогда у factDown должно быть два аргумента:
 * число, для которого вычисляем факториал и аккумулятор.
 
 */

function factDown(n) {

    function go(_n, a) {
	/* cl(["_n=", _n, ", a=", a].join(" ")); */
	return (_n == 1) ? a : go(_n - 1, a * _n);
    }
    return go(n, 1);
}

/**
 * Числа Фибоначи, в которых каждое последующее число равно сумме двух предыдущих чисел. Сама последовательность
 * начинается с 0, 1.
 *
 *
 * 0, 1, 1, 2, 3, 5, 8, 13, 21...
 *
 * Если посмотреть на последовательность, то видно что каждое последующее равно сумме текущего и предыдущего. На
 * этом и построена рекурсия.
 *
 */
function fiban(n) {
    var arr = [0];
    
    function go(_n, prev) {
	if(_n != n){
	    /* cl("_n " + _n + ",  " + prev); */
	    
	    /* next = last        + before_last  */
	    arr[_n] = arr[_n - 1] + prev;
	    go(_n + 1, arr[_n - 1]);
	}
	else return;
    }
    go(1, 1);

    return arr;
}

__.cl(__.gcd(11,121));


/**
 * https://habrahabr.ru/post/275813/
 */
 
 
/**
 *	A
 */
 
function fA(m, n) {

    var fun = function() {
    
	/* The first call, start recursion*/
	if(__.noExisty(arguments[0]))
	    return fun(m);
	else {
	    __.cl(arguments[0], "");
	    return arguments[0] < n ? fun(arguments[0] + 1) : null;
	}
    }
    
    return fun;
}

var from1to20 = fA(1, 20);
//from1to20();


/**
 *	B
 */
 
function fB(from, to) {

    var step = from < to ? 1 : -1

    var fun = function() {

	/* The first call, start recursion*/
	if(__.noExisty(arguments[0]))
	    return fun(from);
	else {
	    __.cl(arguments[0], "");
	    return arguments[0] == to ? null : fun(arguments[0] + step);
	}
    }

    return fun;
}

var from60to50 = fB(60, 50);
//from60to50();


/**
 *	D
 */
 
function fD(n) {
    
    var fun = function(i) {
	if (n > i) return false || fun(i << 1);
	else if (i > n) return false;
	return true;
    }
    return fun(1) ? "YES" : "NO";
}
//console.log(fD(256));


/**
 *	F (печатаем цифры числа справа налево)
 */

function fF(n) {

    if(n == 0) return;
    console.log(n%10);
    fF(Math.floor(n/10));
}
//fF(123456);

/**
 *	G (печатаем цифры числа слева направо)
 */
 
function fG(n) {
    if(n != 0) {
	var t = n%10;
	fG(Math.floor(n/10));
	console.log(t);
    }
    else return;
}
//fG(123456);

/**
 *	H (При делении n на любое число (кроме 1 и n) остаток от деления не должен быть равен 0)
 */
function fH(n) {
    
    var fun = function(d){
	if(d == 1) return true;
	return (n%d != 0) && fun(d - 1);
    }
    
    return fun(n-1) ? "YES" : "NO";
}
//console.log(fH(6));


</script>
</body>
</html>

